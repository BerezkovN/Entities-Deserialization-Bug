//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Sources/Evotico/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""38d1cc82-e723-430f-84e2-a50cf0df8c00"",
            ""actions"": [
                {
                    ""name"": ""CurrentPosition"",
                    ""type"": ""Value"",
                    ""id"": ""1171dd51-9820-4485-9f06-e0c8b19699f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartClick"",
                    ""type"": ""Button"",
                    ""id"": ""18807bbe-4ed7-4ab0-8ad7-b5105e977a21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=1.401298E-45)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EndClick"",
                    ""type"": ""Button"",
                    ""id"": ""8d996f9b-5c57-45a7-a1bb-68013fea3e7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=1.401298E-45,behavior=1)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62c08d8a-5ac6-466d-8610-e07501c6f517"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CurrentPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab13d701-1731-43b8-9ea4-5e0b0e001e8d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CurrentPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de6e31df-131d-44b7-93ce-1339a80f9eb1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86588e7f-6a56-4b36-bd9d-5dc78bd6ed19"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19de9f4d-2bf7-4ba2-b206-2fbdc75e737f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb042d5f-a92d-422d-af40-53ee7f9fa9a1"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_CurrentPosition = m_Player.FindAction("CurrentPosition", throwIfNotFound: true);
        m_Player_StartClick = m_Player.FindAction("StartClick", throwIfNotFound: true);
        m_Player_EndClick = m_Player.FindAction("EndClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_CurrentPosition;
    private readonly InputAction m_Player_StartClick;
    private readonly InputAction m_Player_EndClick;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CurrentPosition => m_Wrapper.m_Player_CurrentPosition;
        public InputAction @StartClick => m_Wrapper.m_Player_StartClick;
        public InputAction @EndClick => m_Wrapper.m_Player_EndClick;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @CurrentPosition.started += instance.OnCurrentPosition;
            @CurrentPosition.performed += instance.OnCurrentPosition;
            @CurrentPosition.canceled += instance.OnCurrentPosition;
            @StartClick.started += instance.OnStartClick;
            @StartClick.performed += instance.OnStartClick;
            @StartClick.canceled += instance.OnStartClick;
            @EndClick.started += instance.OnEndClick;
            @EndClick.performed += instance.OnEndClick;
            @EndClick.canceled += instance.OnEndClick;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @CurrentPosition.started -= instance.OnCurrentPosition;
            @CurrentPosition.performed -= instance.OnCurrentPosition;
            @CurrentPosition.canceled -= instance.OnCurrentPosition;
            @StartClick.started -= instance.OnStartClick;
            @StartClick.performed -= instance.OnStartClick;
            @StartClick.canceled -= instance.OnStartClick;
            @EndClick.started -= instance.OnEndClick;
            @EndClick.performed -= instance.OnEndClick;
            @EndClick.canceled -= instance.OnEndClick;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnCurrentPosition(InputAction.CallbackContext context);
        void OnStartClick(InputAction.CallbackContext context);
        void OnEndClick(InputAction.CallbackContext context);
    }
}
